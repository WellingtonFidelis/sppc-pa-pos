# Generated by Django 5.1.3 on 2024-11-24 23:57

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Consumidor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(db_column='nome', db_comment='Nome do consumidor, paciente ou cliente.', max_length=150, verbose_name='Nome do consumidor')),
                ('data_nascimento', models.DateField(db_column='data_nascimento', db_comment='Data de nascimento do consumidor, paciente ou cliente.', verbose_name='Data de nascimento do consumidor')),
                ('profissao', models.CharField(blank=True, db_column='profissao', db_comment='Profissão ou ocupação principal do consumidor, paciente ou cliente.', max_length=100, verbose_name='Profissão do consumidor')),
                ('fumante', models.BooleanField(db_column='fumante', db_comment='Questiona se o consumidor, paciente ou cliente é fumante.', verbose_name='É fumante?')),
                ('disturbio_circulatorio', models.BooleanField(db_column='disturbio_circulatorio', db_comment='Questiona se o consumidor, paciente ou cliente possui algum distúrbio circulátorio.', verbose_name='Possui algum distúrbio circulátorio?')),
                ('epiletico', models.BooleanField(db_column='epiletico', db_comment='Questiona se o consumidor, paciente ou cliente é epiláptico(a).', verbose_name='É epilético(a)?')),
                ('ciclo_intestinal_regular', models.BooleanField(db_column='ciclo_intestinal_regular', db_comment='Questiona se o consumidor, paciente ou cliente está com o ciclo menstrual regular.', verbose_name='Ciclo de menstruação regular?')),
                ('funcionamento_intestinal_regular', models.BooleanField(db_column='funcionamento_intestinal_regular', db_comment='Questiona se o consumidor, paciente ou cliente está com o funcionamento instestinal regular.', verbose_name='Funcionamento intestinal regular?')),
                ('alteracao_cardiaca', models.BooleanField(db_column='alteracao_cardiaca', db_comment='Questiona se o consumidor, paciente ou cliente possui alterações ou oscilações cardiácas.', verbose_name='Possui alterações ou oscilações cardiácas?')),
                ('disturbio_hormonal', models.BooleanField(db_column='disturbio_hormonal', db_comment='Questiona se o consumidor, paciente ou cliente possui distúrbio hormonal.', verbose_name='Possui distúrbio hormonal?')),
                ('hipotensao', models.BooleanField(db_column='hipotensao', db_comment='Questiona se o consumidor, paciente ou cliente possui hipotensão ou pressão baixa.', verbose_name='Possui hipotensão ou pressão baixa?')),
                ('hipertensao', models.BooleanField(db_column='hipertensao', db_comment='Questiona se o consumidor, paciente ou cliente possui hipertensão ou pressão alta.', verbose_name='Possui hipertensão ou pressão alta?')),
                ('disturbio_renal', models.BooleanField(db_column='disturbio_renal', db_comment='Questiona se o consumidor, paciente ou cliente possui distúrbio renal.', verbose_name='Possui distúrbio renal?')),
                ('varizes_lesoes', models.BooleanField(db_column='varizes_lesoes', db_comment='Questiona se o consumidor, paciente ou cliente possui varizes ou lesões.', verbose_name='Possui varizes ou lesões')),
                ('diabetes', models.BooleanField(db_column='diabetes', db_comment='Questiona se o consumidor, paciente ou cliente possui diabetes.', verbose_name='Possui diabetes?')),
                ('tipo_diabetes', models.CharField(blank=True, choices=[('pre_diabetes', 'Pré diabetes'), ('diabetes_tipo_1', 'Diabetes do tipo 1'), ('diabetes_tipo_2', 'Diabetes do tipo 2'), ('diabetes_gestacional', 'Diabetes gestacional')], db_column='tipo_diabetes', db_comment='Questiona qual o tipo de diabetes do consumidor, paciente ou cliente possui.', max_length=20, verbose_name='Tipo de diabetes')),
                ('diabetes_controlada', models.BooleanField(blank=True, db_column='diabetes_controlada', db_comment='Questiona se o consumidor, paciente ou cliente está com a diabetes controlada.', verbose_name='Diabetes controlada?')),
                ('tratamento_medico', models.BooleanField(db_column='tratamento_medico', db_comment='Questiona se o consumidor, paciente ou cliente está em algum tratamento médico.', verbose_name='Está em algum tratamento médico?')),
                ('detalhe_tratamento_medico', models.CharField(blank=True, db_column='detalhe_tratamento_medico', db_comment='Questiona qual o tratamento médico o consumidor, paciente ou cliente está fazendo.', max_length=200, verbose_name='Detalhe do tratamento médico')),
                ('cirurgia_recente', models.BooleanField(db_column='cirurgia_recente', db_comment='Questiona se o consumidor, paciente ou cliente fez alguma cirurgia recente.', verbose_name='Fez alguma cirurgia recente?')),
                ('detalhe_cirurgia_recente', models.CharField(blank=True, db_column='detalhe_cirurgia_recente', db_comment='Questiona qual a cirurgia recente o consumidor, paciente ou cliente fez.', max_length=200, verbose_name='Detalhe da cirurgia recente.')),
                ('problema_pele', models.BooleanField(db_column='problema_pele', db_comment='Questiona se o consumidor, paciente ou cliente possui algum problema de pele.', verbose_name='Possui algum problema de pele?')),
                ('detalhe_problema_pele', models.CharField(blank=True, db_column='detalhe_problema_pele', db_comment='Questiona qual o problema de pelo do consumidor, paciente ou cliente.', max_length=200, verbose_name='Detalhe do problema de pele.')),
                ('protese_corporal_facial', models.BooleanField(db_column='protese_corporal_facial', db_comment='Questiona se o consumidor, paciente ou cliente possui alguma prótese corporal ou facial.', verbose_name='Possui prótese corporal ou facial?')),
                ('detalhe_protese_corporal_facial', models.CharField(blank=True, db_column='detalhe_protese_corporal_facial', db_comment='Questiona qual a prótese corporal ou facial do consumidor, paciente ou cliente.', max_length=200, verbose_name='Detalhe da prótese corporal ou facial.')),
                ('gestante', models.BooleanField(db_column='gestante', db_comment='Questiona se o consumidor, paciente ou cliente é gestante.', verbose_name='É gestante?')),
                ('semanas_gestante', models.SmallIntegerField(blank=True, db_column='semanas_gestante', db_comment='Questiona quantas semanas de gestação o consumidor, paciente ou cliente tem.', validators=[django.core.validators.MaxValueValidator(50), django.core.validators.MinValueValidator(1)], verbose_name='Quantas semanas de gestação')),
                ('alergia', models.BooleanField(db_column='alergia', db_comment='Questiona se o consumidor, paciente ou cliente possui alguma alergia.', verbose_name='Possui alguma alergia?')),
                ('detalhe_alergia', models.CharField(blank=True, db_column='detalhe_alergia', db_comment='Questiona qual a alergia do consumidor, paciente ou cliente.', max_length=200, verbose_name='Detalhe da alergia.')),
                ('tumor_lesao_precancerosa', models.BooleanField(db_column='tumor_lesao_precancerosa', db_comment='Questiona se o consumidor, paciente ou cliente possui alguma tumor ou lesão pré-cancerosa.', verbose_name='Possui algum tumor ou lesão pré-cancerosa?')),
                ('detalhe_tumor_lesao_precancerosa', models.CharField(blank=True, db_column='detalhe_tumor_lesao_precancerosa', db_comment='Questiona qual o tumor ou lesão pré-cancerosa do consumidor, paciente ou cliente.', max_length=200, verbose_name='Detalhe do tumor ou lesão pré-cancerosa.')),
                ('ortopedico', models.BooleanField(db_column='ortopedico', db_comment='Questiona se o consumidor, paciente ou cliente possui algum problema ortopédico.', verbose_name='Possui algum problema ortopédico?')),
                ('detalhe_ortopedico', models.CharField(blank=True, db_column='detalhe_ortopedico', db_comment='Questiona qual o problema ortopédico do consumidor, paciente ou cliente.', max_length=200, verbose_name='Detalhe do problema ortopédico.')),
                ('acido', models.BooleanField(db_column='acido', db_comment='Questiona se o consumidor, paciente ou cliente faz uso de ácido.', verbose_name='Faz uso de ácido?')),
                ('detalhe_acido', models.CharField(blank=True, db_column='detalhe_acido', db_comment='Questiona qual ácido do consumidor, paciente ou cliente faz uso.', max_length=200, verbose_name='Detalhe do ácido.')),
                ('outro_problema', models.BooleanField(db_column='outro_problema', db_comment='Questiona se o consumidor, paciente ou cliente possui algum outro problema que seja necessário relatar.', verbose_name='Possui algum outro problema que seja necessário relatar?')),
                ('detalhe_outro_problema', models.CharField(blank=True, db_column='detalhe_outro_problema', db_comment='Questiona qual outro problema o consumidor, paciente ou cliente tem.', max_length=200, verbose_name='Detalhe de outro problema.')),
                ('altura', models.DecimalField(db_column='altura', db_comment='Qual altura do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual altura em centímetros (cm)?')),
                ('peso', models.DecimalField(db_column='peso', db_comment='Qual peso do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual peso em quilograma (Kg)?')),
                ('busto', models.DecimalField(db_column='busto', db_comment='Qual tamanho do busto do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual tamanho do busto em centímetros (cm)?')),
                ('braco_esquerdo', models.DecimalField(db_column='braco_esquerdo', db_comment='Qual tamanho do braço esquerdo do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual tamanho do braço esquerdo em centímetros (cm)?')),
                ('braco_direito', models.DecimalField(db_column='braco_direito', db_comment='Qual tamanho do braço direito do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual tamanho do braço direito em centímetros (cm)?')),
                ('abdomen', models.DecimalField(db_column='abdomen', db_comment='Qual tamanho do abdômen do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual tamanho do abdômen em centímetros (cm)?')),
                ('cintura', models.DecimalField(db_column='cintura', db_comment='Qual tamanho da cintura do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual tamanho da cintura em centímetros (cm)?')),
                ('quadril', models.DecimalField(db_column='quadril', db_comment='Qual tamanho do quadril do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual tamanho do quadril em centímetros (cm)?')),
                ('culote', models.DecimalField(db_column='culote', db_comment='Qual tamanho do culote do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual tamanho do culote em centímetros (cm)?')),
                ('coxa_esquerda', models.DecimalField(db_column='coxa_esquerda', db_comment='Qual tamanho da coxa esquerda do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual tamanho da coxa esquerda em centímetros (cm)?')),
                ('coxa_direita', models.DecimalField(db_column='coxa_direita', db_comment='Qual tamanho da coxa direita do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual tamanho da coxa direita em centímetros (cm)?')),
                ('panturrilha_esquerda', models.DecimalField(db_column='panturrilha_esquerda', db_comment='Qual tamanho da panturrilha esquerda do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual tamanho da panturrilha esquerda em centímetros (cm)?')),
                ('panturrilha_direita', models.DecimalField(db_column='panturrilha_direita', db_comment='Qual tamanho da panturrilha direita do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual tamanho da panturrilha direita em centímetros (cm)?')),
            ],
        ),
        migrations.CreateModel(
            name='Produto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(db_column='nome', db_comment='Nome do produto', max_length=100, verbose_name='Nome do produto')),
                ('marca', models.CharField(blank=True, db_column='marca', db_comment='Marca ou linha do produto', max_length=100, verbose_name='Marca ou linha do produto')),
                ('funcao', models.CharField(blank=True, db_column='funcao', db_comment='Função ou objetivo do produto, ex.: Creme para pentear, Creme corporal etc.', max_length=100, verbose_name='Função do produto')),
                ('peso_liquido', models.DecimalField(db_column='peso_liquido', db_comment='Capacidade da embalagem do produto em peso ou liquido.', decimal_places=4, max_digits=4, verbose_name='Peso/liquido do produto')),
                ('unidade_medida', models.CharField(choices=[('g', 'Grama'), ('Kg', 'Quilograma'), ('L', 'Litro'), ('mL', 'Mililitro')], db_column='unidade_medida', db_comment='Unidade de medida que compõe o peso/liquido do produto', max_length=2, verbose_name='Unidade de medida do produto')),
            ],
        ),
        migrations.CreateModel(
            name='PrincipioAtivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(db_column='nome', db_comment='Nome do princípio ativo', max_length=100, verbose_name='Nome do princípo ativo')),
                ('produtos', models.ManyToManyField(to='api_sppc.produto')),
            ],
        ),
        migrations.CreateModel(
            name='Tratamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(db_column='descricao', db_comment='Descrição do tratamento do consumidor, paciente ou cliente.', max_length=200, verbose_name='Descrição do tratamento.')),
                ('data_inicio', models.DateField(db_column='data_inicio', db_comment='Data de início do tratamento do consumidor, paciente ou cliente.', verbose_name='Data de início do tratamento')),
                ('data_fim', models.DateField(blank=True, db_column='data_fim', db_comment='Data do fim do tratamento do consumidor, paciente ou cliente.', verbose_name='Data de fim do tratamento')),
                ('peso_inicial', models.DecimalField(blank=True, db_column='peso_inicial', db_comment='Qual peso inicial do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual peso inicial em quilograma (Kg)?')),
                ('peso_final', models.DecimalField(blank=True, db_column='peso_final', db_comment='Qual peso final do consumidor, paciente ou cliente.', decimal_places=3, max_digits=3, verbose_name='Qual peso final em quilograma (Kg)?')),
                ('eficaz', models.BooleanField(db_column='eficaz', db_comment='Questiona se o tratamendo no consumidor, paciente ou cliente foi eficaz.', verbose_name='Tratamento foi eficaz?')),
                ('consumidores', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_sppc.consumidor')),
                ('produtos', models.ManyToManyField(to='api_sppc.produto')),
            ],
        ),
    ]
